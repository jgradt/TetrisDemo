{"version":3,"sources":["webpack:///webpack/bootstrap 1aa6d682b96b45c2aab3","webpack:///./node_modules/rxjs/Observable.js","webpack:///./node_modules/rxjs/util/root.js","webpack:///./node_modules/rxjs/Subscriber.js","webpack:///./node_modules/rxjs/util/isFunction.js","webpack:///./node_modules/rxjs/util/errorObject.js","webpack:///./node_modules/rxjs/Subscription.js","webpack:///./node_modules/rxjs/util/tryCatch.js","webpack:///./node_modules/rxjs/Observer.js","webpack:///./node_modules/rxjs/symbol/rxSubscriber.js","webpack:///./src/scripts/app.ts","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/rxjs/util/toSubscriber.js","webpack:///./node_modules/rxjs/util/isArray.js","webpack:///./node_modules/rxjs/util/isObject.js","webpack:///./node_modules/rxjs/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/symbol/observable.js","webpack:///./node_modules/rxjs/util/pipe.js","webpack:///./node_modules/rxjs/util/noop.js","webpack:///./node_modules/rxjs/add/observable/fromEvent.js","webpack:///./node_modules/rxjs/observable/fromEvent.js","webpack:///./node_modules/rxjs/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/operator/map.js","webpack:///./node_modules/rxjs/operators/map.js","webpack:///./node_modules/rxjs/add/operator/do.js","webpack:///./node_modules/rxjs/operator/do.js","webpack:///./node_modules/rxjs/operators/tap.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,aAAa;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,eAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA,uFAAuF,gBAAgB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,kBAAkB;AAClB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,mBAAmB;AAClC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB,EAAE,kBAAkB,oBAAoB,EAAE,eAAe,uBAAuB,EAAE;AAC9I,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,sC;;;;;;;8CChTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gC;;;;;;;;AClBA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,IAAI,mBAAmB,mBAAmB,eAAe;AACzD,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA,eAAe,wBAAwB;AACvC;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,aAAa;AAClF;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,wBAAwB;AACvC;AACA,eAAe,iBAAiB;AAChC;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B,yCAAyC,YAAY;AACrD;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sC;;;;;;;ACvQA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;ACLA;AACA;AACA,uBAAuB,MAAM;AAC7B,uC;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA,+CAA+C,mGAAmG,EAAE;AACpJ;AACA,wC;;;;;;;AChMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;AClBA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B,2BAA2B,WAAW,EAAE;AACxC,2BAA2B;AAC3B;AACA,oC;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;ACTA,0CAA6C;AAC7C,wBAAuC;AACvC,wBAA+B;AAC/B,wBAA8B;AAE9B;IAAA;IAeA,CAAC;IAbU,QAAI,GAAX;QAEI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAExB,IAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACnD,IAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC7C,uBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC;aAE5B,GAAG,CAAC,UAAC,KAAoB,IAAO,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aACvG,SAAS,CAAC,aAAG,IAAG,WAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAApC,CAAoC,CAAE,CAAC;IAExE,CAAC;IAEL,UAAC;AAAD,CAAC;AAfY,kBAAG;AAiBhB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AACjC,GAAG,CAAC,IAAI,EAAE,CAAC;;;;;;;ACvBX;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;ACnBA;AACA,kDAAkD,0CAA0C,EAAE;AAC9F,mC;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACLA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G,0CAA0C,EAAE;AACtJ;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,+C;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,iBAAiB,EAAE;AAClE;AACA;AACA;AACA,gC;;;;;;;ACxBA;AACA;AACA,iBAAiB;AACjB;AACA,gC;;;;;;;ACJA;AACA;AACA;AACA;AACA,qC;;;;;;;ACJA;AACA;AACA;AACA,qC;;;;;;;ACHA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB,KAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,gBAAgB;AAC/B;AACA,eAAe,OAAO;AACtB;AACA,eAAe,qBAAqB;AACpC,eAAe,2BAA2B;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yDAAyD;AAChG;AACA;AACA;AACA;AACA,uCAAuC,yCAAyC;AAChF;AACA;AACA;AACA;AACA,uCAAuC,oDAAoD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB,2BAA2B;AACrD;AACA;AACA;AACA,CAAC;AACD;AACA,+C;;;;;;;ACvNA;AACA;AACA;AACA;AACA,+B;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;ACvCA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,+B;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA,8B;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,kBAAkB;AAC7B;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8B;;;;;;;AClDA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,kBAAkB;AAC7B;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,+B","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1aa6d682b96b45c2aab3","\"use strict\";\r\nvar root_1 = require('./util/root');\r\nvar toSubscriber_1 = require('./util/toSubscriber');\r\nvar observable_1 = require('./symbol/observable');\r\nvar pipe_1 = require('./util/pipe');\r\n/**\r\n * A representation of any set of values over any amount of time. This is the most basic building block\r\n * of RxJS.\r\n *\r\n * @class Observable<T>\r\n */\r\nvar Observable = (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {Function} subscribe the function that is called when the Observable is\r\n     * initially subscribed to. This function is given a Subscriber, to which new values\r\n     * can be `next`ed, or an `error` method can be called to raise an error, or\r\n     * `complete` can be called to notify of a successful completion.\r\n     */\r\n    function Observable(subscribe) {\r\n        this._isScalar = false;\r\n        if (subscribe) {\r\n            this._subscribe = subscribe;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new Observable, with this Observable as the source, and the passed\r\n     * operator defined as the new observable's operator.\r\n     * @method lift\r\n     * @param {Operator} operator the operator defining the operation to take on the observable\r\n     * @return {Observable} a new observable with the Operator applied\r\n     */\r\n    Observable.prototype.lift = function (operator) {\r\n        var observable = new Observable();\r\n        observable.source = this;\r\n        observable.operator = operator;\r\n        return observable;\r\n    };\r\n    /**\r\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n     *\r\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n     *\r\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\r\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\r\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\n     * thought.\r\n     *\r\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\r\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\n     * following ways.\r\n     *\r\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\r\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\r\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\r\n     * be left uncaught.\r\n     *\r\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\r\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\r\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\r\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\r\n     *\r\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\r\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n     *\r\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\r\n     * by default emits all its values synchronously. Always check documentation for how given Observable\r\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\r\n     *\r\n     * @example <caption>Subscribe with an Observer</caption>\r\n     * const sumObserver = {\r\n     *   sum: 0,\r\n     *   next(value) {\r\n     *     console.log('Adding: ' + value);\r\n     *     this.sum = this.sum + value;\r\n     *   },\r\n     *   error() { // We actually could just remove this method,\r\n     *   },        // since we do not really care about errors right now.\r\n     *   complete() {\r\n     *     console.log('Sum equals: ' + this.sum);\r\n     *   }\r\n     * };\r\n     *\r\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n     * .subscribe(sumObserver);\r\n     *\r\n     * // Logs:\r\n     * // \"Adding: 1\"\r\n     * // \"Adding: 2\"\r\n     * // \"Adding: 3\"\r\n     * // \"Sum equals: 6\"\r\n     *\r\n     *\r\n     * @example <caption>Subscribe with functions</caption>\r\n     * let sum = 0;\r\n     *\r\n     * Rx.Observable.of(1, 2, 3)\r\n     * .subscribe(\r\n     *   function(value) {\r\n     *     console.log('Adding: ' + value);\r\n     *     sum = sum + value;\r\n     *   },\r\n     *   undefined,\r\n     *   function() {\r\n     *     console.log('Sum equals: ' + sum);\r\n     *   }\r\n     * );\r\n     *\r\n     * // Logs:\r\n     * // \"Adding: 1\"\r\n     * // \"Adding: 2\"\r\n     * // \"Adding: 3\"\r\n     * // \"Sum equals: 6\"\r\n     *\r\n     *\r\n     * @example <caption>Cancel a subscription</caption>\r\n     * const subscription = Rx.Observable.interval(1000).subscribe(\r\n     *   num => console.log(num),\r\n     *   undefined,\r\n     *   () => console.log('completed!') // Will not be called, even\r\n     * );                                // when cancelling subscription\r\n     *\r\n     *\r\n     * setTimeout(() => {\r\n     *   subscription.unsubscribe();\r\n     *   console.log('unsubscribed!');\r\n     * }, 2500);\r\n     *\r\n     * // Logs:\r\n     * // 0 after 1s\r\n     * // 1 after 2s\r\n     * // \"unsubscribed!\" after 2.5s\r\n     *\r\n     *\r\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\n     *  Observable.\r\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\n     *  the error will be thrown as unhandled.\r\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\r\n     * @return {ISubscription} a subscription reference to the registered handlers\r\n     * @method subscribe\r\n     */\r\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\r\n        var operator = this.operator;\r\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\r\n        if (operator) {\r\n            operator.call(sink, this.source);\r\n        }\r\n        else {\r\n            sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\r\n        }\r\n        if (sink.syncErrorThrowable) {\r\n            sink.syncErrorThrowable = false;\r\n            if (sink.syncErrorThrown) {\r\n                throw sink.syncErrorValue;\r\n            }\r\n        }\r\n        return sink;\r\n    };\r\n    Observable.prototype._trySubscribe = function (sink) {\r\n        try {\r\n            return this._subscribe(sink);\r\n        }\r\n        catch (err) {\r\n            sink.syncErrorThrown = true;\r\n            sink.syncErrorValue = err;\r\n            sink.error(err);\r\n        }\r\n    };\r\n    /**\r\n     * @method forEach\r\n     * @param {Function} next a handler for each value emitted by the observable\r\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\r\n     * @return {Promise} a promise that either resolves on observable completion or\r\n     *  rejects with the handled error\r\n     */\r\n    Observable.prototype.forEach = function (next, PromiseCtor) {\r\n        var _this = this;\r\n        if (!PromiseCtor) {\r\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\r\n                PromiseCtor = root_1.root.Rx.config.Promise;\r\n            }\r\n            else if (root_1.root.Promise) {\r\n                PromiseCtor = root_1.root.Promise;\r\n            }\r\n        }\r\n        if (!PromiseCtor) {\r\n            throw new Error('no Promise impl found');\r\n        }\r\n        return new PromiseCtor(function (resolve, reject) {\r\n            // Must be declared in a separate statement to avoid a RefernceError when\r\n            // accessing subscription below in the closure due to Temporal Dead Zone.\r\n            var subscription;\r\n            subscription = _this.subscribe(function (value) {\r\n                if (subscription) {\r\n                    // if there is a subscription, then we can surmise\r\n                    // the next handling is asynchronous. Any errors thrown\r\n                    // need to be rejected explicitly and unsubscribe must be\r\n                    // called manually\r\n                    try {\r\n                        next(value);\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                        subscription.unsubscribe();\r\n                    }\r\n                }\r\n                else {\r\n                    // if there is NO subscription, then we're getting a nexted\r\n                    // value synchronously during subscription. We can just call it.\r\n                    // If it errors, Observable's `subscribe` will ensure the\r\n                    // unsubscription logic is called, then synchronously rethrow the error.\r\n                    // After that, Promise will trap the error and send it\r\n                    // down the rejection path.\r\n                    next(value);\r\n                }\r\n            }, reject, resolve);\r\n        });\r\n    };\r\n    Observable.prototype._subscribe = function (subscriber) {\r\n        return this.source.subscribe(subscriber);\r\n    };\r\n    /**\r\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\r\n     * @method Symbol.observable\r\n     * @return {Observable} this instance of the observable\r\n     */\r\n    Observable.prototype[observable_1.observable] = function () {\r\n        return this;\r\n    };\r\n    /* tslint:enable:max-line-length */\r\n    /**\r\n     * Used to stitch together functional operators into a chain.\r\n     * @method pipe\r\n     * @return {Observable} the Observable result of all of the operators having\r\n     * been called in the order they were passed in.\r\n     *\r\n     * @example\r\n     *\r\n     * import { map, filter, scan } from 'rxjs/operators';\r\n     *\r\n     * Rx.Observable.interval(1000)\r\n     *   .pipe(\r\n     *     filter(x => x % 2 === 0),\r\n     *     map(x => x + x),\r\n     *     scan((acc, x) => acc + x)\r\n     *   )\r\n     *   .subscribe(x => console.log(x))\r\n     */\r\n    Observable.prototype.pipe = function () {\r\n        var operations = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            operations[_i - 0] = arguments[_i];\r\n        }\r\n        if (operations.length === 0) {\r\n            return this;\r\n        }\r\n        return pipe_1.pipeFromArray(operations)(this);\r\n    };\r\n    /* tslint:enable:max-line-length */\r\n    Observable.prototype.toPromise = function (PromiseCtor) {\r\n        var _this = this;\r\n        if (!PromiseCtor) {\r\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\r\n                PromiseCtor = root_1.root.Rx.config.Promise;\r\n            }\r\n            else if (root_1.root.Promise) {\r\n                PromiseCtor = root_1.root.Promise;\r\n            }\r\n        }\r\n        if (!PromiseCtor) {\r\n            throw new Error('no Promise impl found');\r\n        }\r\n        return new PromiseCtor(function (resolve, reject) {\r\n            var value;\r\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\r\n        });\r\n    };\r\n    // HACK: Since TypeScript inherits static properties too, we have to\r\n    // fight against TypeScript here so Subject can have a different static create signature\r\n    /**\r\n     * Creates a new cold Observable by calling the Observable constructor\r\n     * @static true\r\n     * @owner Observable\r\n     * @method create\r\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n     * @return {Observable} a new cold observable\r\n     */\r\n    Observable.create = function (subscribe) {\r\n        return new Observable(subscribe);\r\n    };\r\n    return Observable;\r\n}());\r\nexports.Observable = Observable;\r\n//# sourceMappingURL=Observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Observable.js\n// module id = 0\n// module chunks = 0","\"use strict\";\r\n// CommonJS / Node have global context exposed as \"global\" variable.\r\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\r\n// the global \"global\" var for now.\r\nvar __window = typeof window !== 'undefined' && window;\r\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n    self instanceof WorkerGlobalScope && self;\r\nvar __global = typeof global !== 'undefined' && global;\r\nvar _root = __window || __global || __self;\r\nexports.root = _root;\r\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\r\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\r\n// Wrap in IIFE\r\n(function () {\r\n    if (!_root) {\r\n        throw new Error('RxJS could not find any global context (window, self, global)');\r\n    }\r\n})();\r\n//# sourceMappingURL=root.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/root.js\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar isFunction_1 = require('./util/isFunction');\r\nvar Subscription_1 = require('./Subscription');\r\nvar Observer_1 = require('./Observer');\r\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\r\n/**\r\n * Implements the {@link Observer} interface and extends the\r\n * {@link Subscription} class. While the {@link Observer} is the public API for\r\n * consuming the values of an {@link Observable}, all Observers get converted to\r\n * a Subscriber, in order to provide Subscription-like capabilities such as\r\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\n * implementing operators, but it is rarely used as a public API.\r\n *\r\n * @class Subscriber<T>\r\n */\r\nvar Subscriber = (function (_super) {\r\n    __extends(Subscriber, _super);\r\n    /**\r\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\r\n     * defined Observer or a `next` callback function.\r\n     * @param {function(e: ?any): void} [error] The `error` callback of an\r\n     * Observer.\r\n     * @param {function(): void} [complete] The `complete` callback of an\r\n     * Observer.\r\n     */\r\n    function Subscriber(destinationOrNext, error, complete) {\r\n        _super.call(this);\r\n        this.syncErrorValue = null;\r\n        this.syncErrorThrown = false;\r\n        this.syncErrorThrowable = false;\r\n        this.isStopped = false;\r\n        switch (arguments.length) {\r\n            case 0:\r\n                this.destination = Observer_1.empty;\r\n                break;\r\n            case 1:\r\n                if (!destinationOrNext) {\r\n                    this.destination = Observer_1.empty;\r\n                    break;\r\n                }\r\n                if (typeof destinationOrNext === 'object') {\r\n                    if (destinationOrNext instanceof Subscriber) {\r\n                        this.destination = destinationOrNext;\r\n                        this.destination.add(this);\r\n                    }\r\n                    else {\r\n                        this.syncErrorThrowable = true;\r\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\r\n                    }\r\n                    break;\r\n                }\r\n            default:\r\n                this.syncErrorThrowable = true;\r\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\r\n                break;\r\n        }\r\n    }\r\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\r\n    /**\r\n     * A static factory for a Subscriber, given a (potentially partial) definition\r\n     * of an Observer.\r\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\r\n     * @param {function(e: ?any): void} [error] The `error` callback of an\r\n     * Observer.\r\n     * @param {function(): void} [complete] The `complete` callback of an\r\n     * Observer.\r\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\r\n     * Observer represented by the given arguments.\r\n     */\r\n    Subscriber.create = function (next, error, complete) {\r\n        var subscriber = new Subscriber(next, error, complete);\r\n        subscriber.syncErrorThrowable = false;\r\n        return subscriber;\r\n    };\r\n    /**\r\n     * The {@link Observer} callback to receive notifications of type `next` from\r\n     * the Observable, with a value. The Observable may call this method 0 or more\r\n     * times.\r\n     * @param {T} [value] The `next` value.\r\n     * @return {void}\r\n     */\r\n    Subscriber.prototype.next = function (value) {\r\n        if (!this.isStopped) {\r\n            this._next(value);\r\n        }\r\n    };\r\n    /**\r\n     * The {@link Observer} callback to receive notifications of type `error` from\r\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\r\n     * the Observable has experienced an error condition.\r\n     * @param {any} [err] The `error` exception.\r\n     * @return {void}\r\n     */\r\n    Subscriber.prototype.error = function (err) {\r\n        if (!this.isStopped) {\r\n            this.isStopped = true;\r\n            this._error(err);\r\n        }\r\n    };\r\n    /**\r\n     * The {@link Observer} callback to receive a valueless notification of type\r\n     * `complete` from the Observable. Notifies the Observer that the Observable\r\n     * has finished sending push-based notifications.\r\n     * @return {void}\r\n     */\r\n    Subscriber.prototype.complete = function () {\r\n        if (!this.isStopped) {\r\n            this.isStopped = true;\r\n            this._complete();\r\n        }\r\n    };\r\n    Subscriber.prototype.unsubscribe = function () {\r\n        if (this.closed) {\r\n            return;\r\n        }\r\n        this.isStopped = true;\r\n        _super.prototype.unsubscribe.call(this);\r\n    };\r\n    Subscriber.prototype._next = function (value) {\r\n        this.destination.next(value);\r\n    };\r\n    Subscriber.prototype._error = function (err) {\r\n        this.destination.error(err);\r\n        this.unsubscribe();\r\n    };\r\n    Subscriber.prototype._complete = function () {\r\n        this.destination.complete();\r\n        this.unsubscribe();\r\n    };\r\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\r\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        this.unsubscribe();\r\n        this.closed = false;\r\n        this.isStopped = false;\r\n        this._parent = _parent;\r\n        this._parents = _parents;\r\n        return this;\r\n    };\r\n    return Subscriber;\r\n}(Subscription_1.Subscription));\r\nexports.Subscriber = Subscriber;\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar SafeSubscriber = (function (_super) {\r\n    __extends(SafeSubscriber, _super);\r\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\r\n        _super.call(this);\r\n        this._parentSubscriber = _parentSubscriber;\r\n        var next;\r\n        var context = this;\r\n        if (isFunction_1.isFunction(observerOrNext)) {\r\n            next = observerOrNext;\r\n        }\r\n        else if (observerOrNext) {\r\n            next = observerOrNext.next;\r\n            error = observerOrNext.error;\r\n            complete = observerOrNext.complete;\r\n            if (observerOrNext !== Observer_1.empty) {\r\n                context = Object.create(observerOrNext);\r\n                if (isFunction_1.isFunction(context.unsubscribe)) {\r\n                    this.add(context.unsubscribe.bind(context));\r\n                }\r\n                context.unsubscribe = this.unsubscribe.bind(this);\r\n            }\r\n        }\r\n        this._context = context;\r\n        this._next = next;\r\n        this._error = error;\r\n        this._complete = complete;\r\n    }\r\n    SafeSubscriber.prototype.next = function (value) {\r\n        if (!this.isStopped && this._next) {\r\n            var _parentSubscriber = this._parentSubscriber;\r\n            if (!_parentSubscriber.syncErrorThrowable) {\r\n                this.__tryOrUnsub(this._next, value);\r\n            }\r\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\r\n                this.unsubscribe();\r\n            }\r\n        }\r\n    };\r\n    SafeSubscriber.prototype.error = function (err) {\r\n        if (!this.isStopped) {\r\n            var _parentSubscriber = this._parentSubscriber;\r\n            if (this._error) {\r\n                if (!_parentSubscriber.syncErrorThrowable) {\r\n                    this.__tryOrUnsub(this._error, err);\r\n                    this.unsubscribe();\r\n                }\r\n                else {\r\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\r\n                    this.unsubscribe();\r\n                }\r\n            }\r\n            else if (!_parentSubscriber.syncErrorThrowable) {\r\n                this.unsubscribe();\r\n                throw err;\r\n            }\r\n            else {\r\n                _parentSubscriber.syncErrorValue = err;\r\n                _parentSubscriber.syncErrorThrown = true;\r\n                this.unsubscribe();\r\n            }\r\n        }\r\n    };\r\n    SafeSubscriber.prototype.complete = function () {\r\n        var _this = this;\r\n        if (!this.isStopped) {\r\n            var _parentSubscriber = this._parentSubscriber;\r\n            if (this._complete) {\r\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\r\n                if (!_parentSubscriber.syncErrorThrowable) {\r\n                    this.__tryOrUnsub(wrappedComplete);\r\n                    this.unsubscribe();\r\n                }\r\n                else {\r\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\r\n                    this.unsubscribe();\r\n                }\r\n            }\r\n            else {\r\n                this.unsubscribe();\r\n            }\r\n        }\r\n    };\r\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\r\n        try {\r\n            fn.call(this._context, value);\r\n        }\r\n        catch (err) {\r\n            this.unsubscribe();\r\n            throw err;\r\n        }\r\n    };\r\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\r\n        try {\r\n            fn.call(this._context, value);\r\n        }\r\n        catch (err) {\r\n            parent.syncErrorValue = err;\r\n            parent.syncErrorThrown = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    SafeSubscriber.prototype._unsubscribe = function () {\r\n        var _parentSubscriber = this._parentSubscriber;\r\n        this._context = null;\r\n        this._parentSubscriber = null;\r\n        _parentSubscriber.unsubscribe();\r\n    };\r\n    return SafeSubscriber;\r\n}(Subscriber));\r\n//# sourceMappingURL=Subscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Subscriber.js\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nfunction isFunction(x) {\r\n    return typeof x === 'function';\r\n}\r\nexports.isFunction = isFunction;\r\n//# sourceMappingURL=isFunction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/isFunction.js\n// module id = 3\n// module chunks = 0","\"use strict\";\r\n// typeof any so that it we don't have to cast when comparing a result to the error object\r\nexports.errorObject = { e: {} };\r\n//# sourceMappingURL=errorObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/errorObject.js\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nvar isArray_1 = require('./util/isArray');\r\nvar isObject_1 = require('./util/isObject');\r\nvar isFunction_1 = require('./util/isFunction');\r\nvar tryCatch_1 = require('./util/tryCatch');\r\nvar errorObject_1 = require('./util/errorObject');\r\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\r\n/**\r\n * Represents a disposable resource, such as the execution of an Observable. A\r\n * Subscription has one important method, `unsubscribe`, that takes no argument\r\n * and just disposes the resource held by the subscription.\r\n *\r\n * Additionally, subscriptions may be grouped together through the `add()`\r\n * method, which will attach a child Subscription to the current Subscription.\r\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\r\n * will be unsubscribed as well.\r\n *\r\n * @class Subscription\r\n */\r\nvar Subscription = (function () {\r\n    /**\r\n     * @param {function(): void} [unsubscribe] A function describing how to\r\n     * perform the disposal of resources when the `unsubscribe` method is called.\r\n     */\r\n    function Subscription(unsubscribe) {\r\n        /**\r\n         * A flag to indicate whether this Subscription has already been unsubscribed.\r\n         * @type {boolean}\r\n         */\r\n        this.closed = false;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        this._subscriptions = null;\r\n        if (unsubscribe) {\r\n            this._unsubscribe = unsubscribe;\r\n        }\r\n    }\r\n    /**\r\n     * Disposes the resources held by the subscription. May, for instance, cancel\r\n     * an ongoing Observable execution or cancel any other type of work that\r\n     * started when the Subscription was created.\r\n     * @return {void}\r\n     */\r\n    Subscription.prototype.unsubscribe = function () {\r\n        var hasErrors = false;\r\n        var errors;\r\n        if (this.closed) {\r\n            return;\r\n        }\r\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\r\n        this.closed = true;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        // null out _subscriptions first so any child subscriptions that attempt\r\n        // to remove themselves from this subscription will noop\r\n        this._subscriptions = null;\r\n        var index = -1;\r\n        var len = _parents ? _parents.length : 0;\r\n        // if this._parent is null, then so is this._parents, and we\r\n        // don't have to remove ourselves from any parent subscriptions.\r\n        while (_parent) {\r\n            _parent.remove(this);\r\n            // if this._parents is null or index >= len,\r\n            // then _parent is set to null, and the loop exits\r\n            _parent = ++index < len && _parents[index] || null;\r\n        }\r\n        if (isFunction_1.isFunction(_unsubscribe)) {\r\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\r\n            if (trial === errorObject_1.errorObject) {\r\n                hasErrors = true;\r\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\r\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\r\n            }\r\n        }\r\n        if (isArray_1.isArray(_subscriptions)) {\r\n            index = -1;\r\n            len = _subscriptions.length;\r\n            while (++index < len) {\r\n                var sub = _subscriptions[index];\r\n                if (isObject_1.isObject(sub)) {\r\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\r\n                    if (trial === errorObject_1.errorObject) {\r\n                        hasErrors = true;\r\n                        errors = errors || [];\r\n                        var err = errorObject_1.errorObject.e;\r\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\r\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\r\n                        }\r\n                        else {\r\n                            errors.push(err);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hasErrors) {\r\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\r\n        }\r\n    };\r\n    /**\r\n     * Adds a tear down to be called during the unsubscribe() of this\r\n     * Subscription.\r\n     *\r\n     * If the tear down being added is a subscription that is already\r\n     * unsubscribed, is the same reference `add` is being called on, or is\r\n     * `Subscription.EMPTY`, it will not be added.\r\n     *\r\n     * If this subscription is already in an `closed` state, the passed\r\n     * tear down logic will be executed immediately.\r\n     *\r\n     * @param {TeardownLogic} teardown The additional logic to execute on\r\n     * teardown.\r\n     * @return {Subscription} Returns the Subscription used or created to be\r\n     * added to the inner subscriptions list. This Subscription can be used with\r\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\r\n     * list.\r\n     */\r\n    Subscription.prototype.add = function (teardown) {\r\n        if (!teardown || (teardown === Subscription.EMPTY)) {\r\n            return Subscription.EMPTY;\r\n        }\r\n        if (teardown === this) {\r\n            return this;\r\n        }\r\n        var subscription = teardown;\r\n        switch (typeof teardown) {\r\n            case 'function':\r\n                subscription = new Subscription(teardown);\r\n            case 'object':\r\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\r\n                    return subscription;\r\n                }\r\n                else if (this.closed) {\r\n                    subscription.unsubscribe();\r\n                    return subscription;\r\n                }\r\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\r\n                    var tmp = subscription;\r\n                    subscription = new Subscription();\r\n                    subscription._subscriptions = [tmp];\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\r\n        }\r\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\r\n        subscriptions.push(subscription);\r\n        subscription._addParent(this);\r\n        return subscription;\r\n    };\r\n    /**\r\n     * Removes a Subscription from the internal list of subscriptions that will\r\n     * unsubscribe during the unsubscribe process of this Subscription.\r\n     * @param {Subscription} subscription The subscription to remove.\r\n     * @return {void}\r\n     */\r\n    Subscription.prototype.remove = function (subscription) {\r\n        var subscriptions = this._subscriptions;\r\n        if (subscriptions) {\r\n            var subscriptionIndex = subscriptions.indexOf(subscription);\r\n            if (subscriptionIndex !== -1) {\r\n                subscriptions.splice(subscriptionIndex, 1);\r\n            }\r\n        }\r\n    };\r\n    Subscription.prototype._addParent = function (parent) {\r\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\r\n        if (!_parent || _parent === parent) {\r\n            // If we don't have a parent, or the new parent is the same as the\r\n            // current parent, then set this._parent to the new parent.\r\n            this._parent = parent;\r\n        }\r\n        else if (!_parents) {\r\n            // If there's already one parent, but not multiple, allocate an Array to\r\n            // store the rest of the parent Subscriptions.\r\n            this._parents = [parent];\r\n        }\r\n        else if (_parents.indexOf(parent) === -1) {\r\n            // Only add the new parent to the _parents list if it's not already there.\r\n            _parents.push(parent);\r\n        }\r\n    };\r\n    Subscription.EMPTY = (function (empty) {\r\n        empty.closed = true;\r\n        return empty;\r\n    }(new Subscription()));\r\n    return Subscription;\r\n}());\r\nexports.Subscription = Subscription;\r\nfunction flattenUnsubscriptionErrors(errors) {\r\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\r\n}\r\n//# sourceMappingURL=Subscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Subscription.js\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nvar errorObject_1 = require('./errorObject');\r\nvar tryCatchTarget;\r\nfunction tryCatcher() {\r\n    try {\r\n        return tryCatchTarget.apply(this, arguments);\r\n    }\r\n    catch (e) {\r\n        errorObject_1.errorObject.e = e;\r\n        return errorObject_1.errorObject;\r\n    }\r\n}\r\nfunction tryCatch(fn) {\r\n    tryCatchTarget = fn;\r\n    return tryCatcher;\r\n}\r\nexports.tryCatch = tryCatch;\r\n;\r\n//# sourceMappingURL=tryCatch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/tryCatch.js\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nexports.empty = {\r\n    closed: true,\r\n    next: function (value) { },\r\n    error: function (err) { throw err; },\r\n    complete: function () { }\r\n};\r\n//# sourceMappingURL=Observer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Observer.js\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nvar root_1 = require('../util/root');\r\nvar Symbol = root_1.root.Symbol;\r\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\r\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\r\n/**\r\n * @deprecated use rxSubscriber instead\r\n */\r\nexports.$$rxSubscriber = exports.rxSubscriber;\r\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/symbol/rxSubscriber.js\n// module id = 8\n// module chunks = 0","import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\n\r\nexport class App {\r\n\r\n    static main() {\r\n\r\n        console.log(\"app main\");\r\n        \r\n        const content = document.getElementById(\"content\");\r\n        const code = document.getElementById(\"code\");\r\n        Observable.fromEvent(document, 'keydown')\r\n                    //.do(event => console.log(event))\r\n                    .map((event: KeyboardEvent) => { return { key: event.key, keyCode: event.keyCode, char: event.char }; })\r\n                    .subscribe(val=> code.innerHTML = JSON.stringify(val) );\r\n\r\n    }\r\n    \r\n}\r\n\r\nconsole.log('app module loaded');\r\nApp.main();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/scripts/app.ts","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 10\n// module chunks = 0","\"use strict\";\r\nvar Subscriber_1 = require('../Subscriber');\r\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\r\nvar Observer_1 = require('../Observer');\r\nfunction toSubscriber(nextOrObserver, error, complete) {\r\n    if (nextOrObserver) {\r\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\r\n            return nextOrObserver;\r\n        }\r\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\r\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\r\n        }\r\n    }\r\n    if (!nextOrObserver && !error && !complete) {\r\n        return new Subscriber_1.Subscriber(Observer_1.empty);\r\n    }\r\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\r\n}\r\nexports.toSubscriber = toSubscriber;\r\n//# sourceMappingURL=toSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/toSubscriber.js\n// module id = 11\n// module chunks = 0","\"use strict\";\r\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\r\n//# sourceMappingURL=isArray.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/isArray.js\n// module id = 12\n// module chunks = 0","\"use strict\";\r\nfunction isObject(x) {\r\n    return x != null && typeof x === 'object';\r\n}\r\nexports.isObject = isObject;\r\n//# sourceMappingURL=isObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/isObject.js\n// module id = 13\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/**\r\n * An error thrown when one or more errors have occurred during the\r\n * `unsubscribe` of a {@link Subscription}.\r\n */\r\nvar UnsubscriptionError = (function (_super) {\r\n    __extends(UnsubscriptionError, _super);\r\n    function UnsubscriptionError(errors) {\r\n        _super.call(this);\r\n        this.errors = errors;\r\n        var err = Error.call(this, errors ?\r\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\r\n        this.name = err.name = 'UnsubscriptionError';\r\n        this.stack = err.stack;\r\n        this.message = err.message;\r\n    }\r\n    return UnsubscriptionError;\r\n}(Error));\r\nexports.UnsubscriptionError = UnsubscriptionError;\r\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/UnsubscriptionError.js\n// module id = 14\n// module chunks = 0","\"use strict\";\r\nvar root_1 = require('../util/root');\r\nfunction getSymbolObservable(context) {\r\n    var $$observable;\r\n    var Symbol = context.Symbol;\r\n    if (typeof Symbol === 'function') {\r\n        if (Symbol.observable) {\r\n            $$observable = Symbol.observable;\r\n        }\r\n        else {\r\n            $$observable = Symbol('observable');\r\n            Symbol.observable = $$observable;\r\n        }\r\n    }\r\n    else {\r\n        $$observable = '@@observable';\r\n    }\r\n    return $$observable;\r\n}\r\nexports.getSymbolObservable = getSymbolObservable;\r\nexports.observable = getSymbolObservable(root_1.root);\r\n/**\r\n * @deprecated use observable instead\r\n */\r\nexports.$$observable = exports.observable;\r\n//# sourceMappingURL=observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/symbol/observable.js\n// module id = 15\n// module chunks = 0","\"use strict\";\r\nvar noop_1 = require('./noop');\r\n/* tslint:enable:max-line-length */\r\nfunction pipe() {\r\n    var fns = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        fns[_i - 0] = arguments[_i];\r\n    }\r\n    return pipeFromArray(fns);\r\n}\r\nexports.pipe = pipe;\r\n/* @internal */\r\nfunction pipeFromArray(fns) {\r\n    if (!fns) {\r\n        return noop_1.noop;\r\n    }\r\n    if (fns.length === 1) {\r\n        return fns[0];\r\n    }\r\n    return function piped(input) {\r\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\r\n    };\r\n}\r\nexports.pipeFromArray = pipeFromArray;\r\n//# sourceMappingURL=pipe.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/pipe.js\n// module id = 16\n// module chunks = 0","\"use strict\";\r\n/* tslint:disable:no-empty */\r\nfunction noop() { }\r\nexports.noop = noop;\r\n//# sourceMappingURL=noop.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/noop.js\n// module id = 17\n// module chunks = 0","\"use strict\";\r\nvar Observable_1 = require('../../Observable');\r\nvar fromEvent_1 = require('../../observable/fromEvent');\r\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\r\n//# sourceMappingURL=fromEvent.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/observable/fromEvent.js\n// module id = 18\n// module chunks = 0","\"use strict\";\r\nvar FromEventObservable_1 = require('./FromEventObservable');\r\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\r\n//# sourceMappingURL=fromEvent.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/observable/fromEvent.js\n// module id = 19\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Observable_1 = require('../Observable');\r\nvar tryCatch_1 = require('../util/tryCatch');\r\nvar isFunction_1 = require('../util/isFunction');\r\nvar errorObject_1 = require('../util/errorObject');\r\nvar Subscription_1 = require('../Subscription');\r\nvar toString = Object.prototype.toString;\r\nfunction isNodeStyleEventEmitter(sourceObj) {\r\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\r\n}\r\nfunction isJQueryStyleEventEmitter(sourceObj) {\r\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\r\n}\r\nfunction isNodeList(sourceObj) {\r\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\r\n}\r\nfunction isHTMLCollection(sourceObj) {\r\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\r\n}\r\nfunction isEventTarget(sourceObj) {\r\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nvar FromEventObservable = (function (_super) {\r\n    __extends(FromEventObservable, _super);\r\n    function FromEventObservable(sourceObj, eventName, selector, options) {\r\n        _super.call(this);\r\n        this.sourceObj = sourceObj;\r\n        this.eventName = eventName;\r\n        this.selector = selector;\r\n        this.options = options;\r\n    }\r\n    /* tslint:enable:max-line-length */\r\n    /**\r\n     * Creates an Observable that emits events of a specific type coming from the\r\n     * given event target.\r\n     *\r\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\r\n     * EventEmitter events or others.</span>\r\n     *\r\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\r\n     *\r\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\r\n     * for registering event handler functions. As a second argument it takes string that indicates\r\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\r\n     * which are described in detail below. If your event target does not match any of the ones listed,\r\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\r\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\r\n     * handler functions have different names, but they all accept a string describing event type\r\n     * and function itself, which will be called whenever said event happens.\r\n     *\r\n     * Every time resulting Observable is subscribed, event handler function will be registered\r\n     * to event target on given event type. When that event fires, value\r\n     * passed as a first argument to registered function will be emitted by output Observable.\r\n     * When Observable is unsubscribed, function will be unregistered from event target.\r\n     *\r\n     * Note that if event target calls registered function with more than one argument, second\r\n     * and following arguments will not appear in resulting stream. In order to get access to them,\r\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\r\n     * passed to event handler. Output Observable will then emit value returned by project function,\r\n     * instead of the usual value.\r\n     *\r\n     * Remember that event targets listed below are checked via duck typing. It means that\r\n     * no matter what kind of object you have and no matter what environment you work in,\r\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\r\n     * of course they behave as was described above). So for example if Node.js library exposes\r\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\r\n     * a good choice.\r\n     *\r\n     * If the API you use is more callback then event handler oriented (subscribed\r\n     * callback function fires only once and thus there is no need to manually\r\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\r\n     * instead.\r\n     *\r\n     * `fromEvent` supports following types of event targets:\r\n     *\r\n     * **DOM EventTarget**\r\n     *\r\n     * This is an object with `addEventListener` and `removeEventListener` methods.\r\n     *\r\n     * In the browser, `addEventListener` accepts - apart from event type string and event\r\n     * handler function arguments - optional third parameter, which is either an object or boolean,\r\n     * both used for additional configuration how and when passed function will be called. When\r\n     * `fromEvent` is used with event target of that type, you can provide this values\r\n     * as third parameter as well.\r\n     *\r\n     * **Node.js EventEmitter**\r\n     *\r\n     * An object with `addListener` and `removeListener` methods.\r\n     *\r\n     * **JQuery-style event target**\r\n     *\r\n     * An object with `on` and `off` methods\r\n     *\r\n     * **DOM NodeList**\r\n     *\r\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\r\n     *\r\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\r\n     * it contains and install event handler function in every of them. When returned Observable\r\n     * is unsubscribed, function will be removed from all Nodes.\r\n     *\r\n     * **DOM HtmlCollection**\r\n     *\r\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\r\n     * installed and removed in each of elements.\r\n     *\r\n     *\r\n     * @example <caption>Emits clicks happening on the DOM document</caption>\r\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n     * clicks.subscribe(x => console.log(x));\r\n     *\r\n     * // Results in:\r\n     * // MouseEvent object logged to console every time a click\r\n     * // occurs on the document.\r\n     *\r\n     *\r\n     * @example <caption>Use addEventListener with capture option</caption>\r\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\r\n     *                                                                          // which will be passed to addEventListener\r\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\r\n     *\r\n     * clicksInDocument.subscribe(() => console.log('document'));\r\n     * clicksInDiv.subscribe(() => console.log('div'));\r\n     *\r\n     * // By default events bubble UP in DOM tree, so normally\r\n     * // when we would click on div in document\r\n     * // \"div\" would be logged first and then \"document\".\r\n     * // Since we specified optional `capture` option, document\r\n     * // will catch event when it goes DOWN DOM tree, so console\r\n     * // will log \"document\" and then \"div\".\r\n     *\r\n     * @see {@link bindCallback}\r\n     * @see {@link bindNodeCallback}\r\n     * @see {@link fromEventPattern}\r\n     *\r\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\r\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\r\n     * @param {string} eventName The event name of interest, being emitted by the\r\n     * `target`.\r\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\r\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\r\n     * post-process results. It takes the arguments from the event handler and\r\n     * should return a single value.\r\n     * @return {Observable<T>}\r\n     * @static true\r\n     * @name fromEvent\r\n     * @owner Observable\r\n     */\r\n    FromEventObservable.create = function (target, eventName, options, selector) {\r\n        if (isFunction_1.isFunction(options)) {\r\n            selector = options;\r\n            options = undefined;\r\n        }\r\n        return new FromEventObservable(target, eventName, selector, options);\r\n    };\r\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\r\n        var unsubscribe;\r\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\r\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\r\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\r\n            }\r\n        }\r\n        else if (isEventTarget(sourceObj)) {\r\n            var source_1 = sourceObj;\r\n            sourceObj.addEventListener(eventName, handler, options);\r\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };\r\n        }\r\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\r\n            var source_2 = sourceObj;\r\n            sourceObj.on(eventName, handler);\r\n            unsubscribe = function () { return source_2.off(eventName, handler); };\r\n        }\r\n        else if (isNodeStyleEventEmitter(sourceObj)) {\r\n            var source_3 = sourceObj;\r\n            sourceObj.addListener(eventName, handler);\r\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\r\n        }\r\n        else {\r\n            throw new TypeError('Invalid event target');\r\n        }\r\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\r\n    };\r\n    FromEventObservable.prototype._subscribe = function (subscriber) {\r\n        var sourceObj = this.sourceObj;\r\n        var eventName = this.eventName;\r\n        var options = this.options;\r\n        var selector = this.selector;\r\n        var handler = selector ? function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i - 0] = arguments[_i];\r\n            }\r\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\r\n            if (result === errorObject_1.errorObject) {\r\n                subscriber.error(errorObject_1.errorObject.e);\r\n            }\r\n            else {\r\n                subscriber.next(result);\r\n            }\r\n        } : function (e) { return subscriber.next(e); };\r\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\r\n    };\r\n    return FromEventObservable;\r\n}(Observable_1.Observable));\r\nexports.FromEventObservable = FromEventObservable;\r\n//# sourceMappingURL=FromEventObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/observable/FromEventObservable.js\n// module id = 20\n// module chunks = 0","\"use strict\";\r\nvar Observable_1 = require('../../Observable');\r\nvar map_1 = require('../../operator/map');\r\nObservable_1.Observable.prototype.map = map_1.map;\r\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/map.js\n// module id = 21\n// module chunks = 0","\"use strict\";\r\nvar map_1 = require('../operators/map');\r\n/**\r\n * Applies a given `project` function to each value emitted by the source\r\n * Observable, and emits the resulting values as an Observable.\r\n *\r\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\r\n * it passes each source value through a transformation function to get\r\n * corresponding output values.</span>\r\n *\r\n * <img src=\"./img/map.png\" width=\"100%\">\r\n *\r\n * Similar to the well known `Array.prototype.map` function, this operator\r\n * applies a projection to each value and emits that projection in the output\r\n * Observable.\r\n *\r\n * @example <caption>Map every click to the clientX position of that click</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var positions = clicks.map(ev => ev.clientX);\r\n * positions.subscribe(x => console.log(x));\r\n *\r\n * @see {@link mapTo}\r\n * @see {@link pluck}\r\n *\r\n * @param {function(value: T, index: number): R} project The function to apply\r\n * to each `value` emitted by the source Observable. The `index` parameter is\r\n * the number `i` for the i-th emission that has happened since the\r\n * subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to define what `this` is in the\r\n * `project` function.\r\n * @return {Observable<R>} An Observable that emits the values from the source\r\n * Observable transformed by the given `project` function.\r\n * @method map\r\n * @owner Observable\r\n */\r\nfunction map(project, thisArg) {\r\n    return map_1.map(project, thisArg)(this);\r\n}\r\nexports.map = map;\r\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operator/map.js\n// module id = 22\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\n/**\r\n * Applies a given `project` function to each value emitted by the source\r\n * Observable, and emits the resulting values as an Observable.\r\n *\r\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\r\n * it passes each source value through a transformation function to get\r\n * corresponding output values.</span>\r\n *\r\n * <img src=\"./img/map.png\" width=\"100%\">\r\n *\r\n * Similar to the well known `Array.prototype.map` function, this operator\r\n * applies a projection to each value and emits that projection in the output\r\n * Observable.\r\n *\r\n * @example <caption>Map every click to the clientX position of that click</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var positions = clicks.map(ev => ev.clientX);\r\n * positions.subscribe(x => console.log(x));\r\n *\r\n * @see {@link mapTo}\r\n * @see {@link pluck}\r\n *\r\n * @param {function(value: T, index: number): R} project The function to apply\r\n * to each `value` emitted by the source Observable. The `index` parameter is\r\n * the number `i` for the i-th emission that has happened since the\r\n * subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to define what `this` is in the\r\n * `project` function.\r\n * @return {Observable<R>} An Observable that emits the values from the source\r\n * Observable transformed by the given `project` function.\r\n * @method map\r\n * @owner Observable\r\n */\r\nfunction map(project, thisArg) {\r\n    return function mapOperation(source) {\r\n        if (typeof project !== 'function') {\r\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\r\n        }\r\n        return source.lift(new MapOperator(project, thisArg));\r\n    };\r\n}\r\nexports.map = map;\r\nvar MapOperator = (function () {\r\n    function MapOperator(project, thisArg) {\r\n        this.project = project;\r\n        this.thisArg = thisArg;\r\n    }\r\n    MapOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\r\n    };\r\n    return MapOperator;\r\n}());\r\nexports.MapOperator = MapOperator;\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar MapSubscriber = (function (_super) {\r\n    __extends(MapSubscriber, _super);\r\n    function MapSubscriber(destination, project, thisArg) {\r\n        _super.call(this, destination);\r\n        this.project = project;\r\n        this.count = 0;\r\n        this.thisArg = thisArg || this;\r\n    }\r\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\r\n    // using try/catch optimizations.\r\n    MapSubscriber.prototype._next = function (value) {\r\n        var result;\r\n        try {\r\n            result = this.project.call(this.thisArg, value, this.count++);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this.destination.next(result);\r\n    };\r\n    return MapSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operators/map.js\n// module id = 23\n// module chunks = 0","\"use strict\";\r\nvar Observable_1 = require('../../Observable');\r\nvar do_1 = require('../../operator/do');\r\nObservable_1.Observable.prototype.do = do_1._do;\r\nObservable_1.Observable.prototype._do = do_1._do;\r\n//# sourceMappingURL=do.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/do.js\n// module id = 24\n// module chunks = 0","\"use strict\";\r\nvar tap_1 = require('../operators/tap');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Perform a side effect for every emission on the source Observable, but return\r\n * an Observable that is identical to the source.\r\n *\r\n * <span class=\"informal\">Intercepts each emission on the source and runs a\r\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\r\n *\r\n * <img src=\"./img/do.png\" width=\"100%\">\r\n *\r\n * Returns a mirrored Observable of the source Observable, but modified so that\r\n * the provided Observer is called to perform a side effect for every value,\r\n * error, and completion emitted by the source. Any errors that are thrown in\r\n * the aforementioned Observer or handlers are safely sent down the error path\r\n * of the output Observable.\r\n *\r\n * This operator is useful for debugging your Observables for the correct values\r\n * or performing other side effects.\r\n *\r\n * Note: this is different to a `subscribe` on the Observable. If the Observable\r\n * returned by `do` is not subscribed, the side effects specified by the\r\n * Observer will never happen. `do` therefore simply spies on existing\r\n * execution, it does not trigger an execution to happen like `subscribe` does.\r\n *\r\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var positions = clicks\r\n *   .do(ev => console.log(ev))\r\n *   .map(ev => ev.clientX);\r\n * positions.subscribe(x => console.log(x));\r\n *\r\n * @see {@link map}\r\n * @see {@link subscribe}\r\n *\r\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\r\n * callback for `next`.\r\n * @param {function} [error] Callback for errors in the source.\r\n * @param {function} [complete] Callback for the completion of the source.\r\n * @return {Observable} An Observable identical to the source, but runs the\r\n * specified Observer or callback(s) for each item.\r\n * @method do\r\n * @name do\r\n * @owner Observable\r\n */\r\nfunction _do(nextOrObserver, error, complete) {\r\n    return tap_1.tap(nextOrObserver, error, complete)(this);\r\n}\r\nexports._do = _do;\r\n//# sourceMappingURL=do.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operator/do.js\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Subscriber_1 = require('../Subscriber');\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Perform a side effect for every emission on the source Observable, but return\r\n * an Observable that is identical to the source.\r\n *\r\n * <span class=\"informal\">Intercepts each emission on the source and runs a\r\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\r\n *\r\n * <img src=\"./img/do.png\" width=\"100%\">\r\n *\r\n * Returns a mirrored Observable of the source Observable, but modified so that\r\n * the provided Observer is called to perform a side effect for every value,\r\n * error, and completion emitted by the source. Any errors that are thrown in\r\n * the aforementioned Observer or handlers are safely sent down the error path\r\n * of the output Observable.\r\n *\r\n * This operator is useful for debugging your Observables for the correct values\r\n * or performing other side effects.\r\n *\r\n * Note: this is different to a `subscribe` on the Observable. If the Observable\r\n * returned by `do` is not subscribed, the side effects specified by the\r\n * Observer will never happen. `do` therefore simply spies on existing\r\n * execution, it does not trigger an execution to happen like `subscribe` does.\r\n *\r\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var positions = clicks\r\n *   .do(ev => console.log(ev))\r\n *   .map(ev => ev.clientX);\r\n * positions.subscribe(x => console.log(x));\r\n *\r\n * @see {@link map}\r\n * @see {@link subscribe}\r\n *\r\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\r\n * callback for `next`.\r\n * @param {function} [error] Callback for errors in the source.\r\n * @param {function} [complete] Callback for the completion of the source.\r\n * @return {Observable} An Observable identical to the source, but runs the\r\n * specified Observer or callback(s) for each item.\r\n * @name tap\r\n */\r\nfunction tap(nextOrObserver, error, complete) {\r\n    return function tapOperatorFunction(source) {\r\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\r\n    };\r\n}\r\nexports.tap = tap;\r\nvar DoOperator = (function () {\r\n    function DoOperator(nextOrObserver, error, complete) {\r\n        this.nextOrObserver = nextOrObserver;\r\n        this.error = error;\r\n        this.complete = complete;\r\n    }\r\n    DoOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\r\n    };\r\n    return DoOperator;\r\n}());\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nvar DoSubscriber = (function (_super) {\r\n    __extends(DoSubscriber, _super);\r\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\r\n        _super.call(this, destination);\r\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\r\n        safeSubscriber.syncErrorThrowable = true;\r\n        this.add(safeSubscriber);\r\n        this.safeSubscriber = safeSubscriber;\r\n    }\r\n    DoSubscriber.prototype._next = function (value) {\r\n        var safeSubscriber = this.safeSubscriber;\r\n        safeSubscriber.next(value);\r\n        if (safeSubscriber.syncErrorThrown) {\r\n            this.destination.error(safeSubscriber.syncErrorValue);\r\n        }\r\n        else {\r\n            this.destination.next(value);\r\n        }\r\n    };\r\n    DoSubscriber.prototype._error = function (err) {\r\n        var safeSubscriber = this.safeSubscriber;\r\n        safeSubscriber.error(err);\r\n        if (safeSubscriber.syncErrorThrown) {\r\n            this.destination.error(safeSubscriber.syncErrorValue);\r\n        }\r\n        else {\r\n            this.destination.error(err);\r\n        }\r\n    };\r\n    DoSubscriber.prototype._complete = function () {\r\n        var safeSubscriber = this.safeSubscriber;\r\n        safeSubscriber.complete();\r\n        if (safeSubscriber.syncErrorThrown) {\r\n            this.destination.error(safeSubscriber.syncErrorValue);\r\n        }\r\n        else {\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return DoSubscriber;\r\n}(Subscriber_1.Subscriber));\r\n//# sourceMappingURL=tap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operators/tap.js\n// module id = 26\n// module chunks = 0"],"sourceRoot":""}